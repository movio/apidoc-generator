/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 */
package com.gilt.quality.v0.models {

  case class AdjournForm(
    adjournedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  /**
   * Describe an agenda item for a meeting. Currently the only agenda items we have
   * are that a particular incident needs to be reviewed.
   */
  case class AgendaItem(
    id: Long,
    meeting: com.gilt.quality.v0.models.Meeting,
    incident: com.gilt.quality.v0.models.Incident,
    task: com.gilt.quality.v0.models.Task
  )

  case class AgendaItemForm(
    meetingId: Long,
    incidentId: Long,
    task: com.gilt.quality.v0.models.Task
  )

  case class AuthenticationForm(
    email: String
  )

  case class EmailMessage(
    subject: String,
    body: String
  )

  case class Error(
    code: String,
    message: String
  )

  /**
   * Stores metadata about external services that can be integrated with the quality
   * app
   */
  case class ExternalService(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    name: com.gilt.quality.v0.models.ExternalServiceName,
    url: String,
    username: String
  )

  case class ExternalServiceForm(
    name: com.gilt.quality.v0.models.ExternalServiceName,
    url: String,
    username: String,
    password: String
  )

  /**
   * Every n days (e.g. 30) we follow up to see if a given plan has been implemented.
   * This gives teams the ability to say: Yes, completed. Not yet. or No, won't do.
   * After 3 consecutive no replies, we assume not doing.
   */
  case class Followup(
    key: String,
    plan: com.gilt.quality.v0.models.Plan,
    sentAt: _root_.org.joda.time.DateTime
  )

  /**
   * Every n days (e.g. 30) we follow up to see if a given plan has been implemented.
   * This gives teams the ability to say: Yes, completed. Not yet. or No, won't do.
   * After 3 consecutive no replies, we assume not doing.
   */
  case class FollowupResponse(
    followup: com.gilt.quality.v0.models.Followup,
    response: com.gilt.quality.v0.models.Response,
    createdAt: _root_.org.joda.time.DateTime,
    createdBy: com.gilt.quality.v0.models.User
  )

  case class Healthcheck(
    status: String
  )

  /**
   * URLs to key icons used through the application
   */
  case class Icons(
    smileyUrl: String,
    frownyUrl: String
  )

  /**
   * A bug or error that affected public or internal users in a negative way
   */
  case class Incident(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    summary: String,
    description: _root_.scala.Option[String] = None,
    team: _root_.scala.Option[com.gilt.quality.v0.models.Team] = None,
    severity: com.gilt.quality.v0.models.Severity,
    tags: _root_.scala.Option[Seq[String]] = None,
    plan: _root_.scala.Option[com.gilt.quality.v0.models.Plan] = None,
    createdAt: _root_.org.joda.time.DateTime
  )

  case class IncidentForm(
    teamKey: _root_.scala.Option[String] = None,
    severity: com.gilt.quality.v0.models.Severity,
    summary: String,
    description: _root_.scala.Option[String] = None,
    tags: _root_.scala.Option[Seq[String]] = None
  )

  /**
   * Used to move an incident to another organization
   */
  case class IncidentOrganizationChange(
    incidentId: Long,
    organizationKey: String
  )

  case class IncidentSummary(
    id: Long,
    severity: com.gilt.quality.v0.models.Severity,
    summary: String
  )

  /**
   * Meetings happen on a regular schedule (e.g. thursdays from 11-12 EST). As
   * incidents are created, they are automatically assigned to the next meeting.
   * Incidents can then be reviewed from the context of a meeting, facilitating
   * online navigation. Incidents within a meeting can require one of two actions -
   * team assignment or plan review.
   */
  case class Meeting(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    scheduledAt: _root_.org.joda.time.DateTime,
    adjournedAt: _root_.scala.Option[_root_.org.joda.time.DateTime] = None
  )

  case class MeetingForm(
    scheduledAt: _root_.org.joda.time.DateTime
  )

  /**
   * Used to enable pagination when walking through the issues in a particular
   * meeting. General idea is given a meeting id and an incident id, returns the
   * previous and next incident IDs, if any
   */
  case class MeetingPager(
    meeting: com.gilt.quality.v0.models.Meeting,
    priorIncident: _root_.scala.Option[com.gilt.quality.v0.models.Incident] = None,
    nextIncident: _root_.scala.Option[com.gilt.quality.v0.models.Incident] = None
  )

  /**
   * Top level organization for which we are managing quality. Key entities like
   * teams and meetings are scoped to the organization.
   */
  case class Organization(
    key: String,
    name: String
  )

  case class OrganizationForm(
    name: String,
    key: _root_.scala.Option[String] = None
  )

  /**
   * Details for how an incident will be resolved
   */
  case class Plan(
    id: Long,
    incidentId: Long,
    body: String,
    grade: _root_.scala.Option[Int] = None,
    createdAt: _root_.org.joda.time.DateTime
  )

  case class PlanForm(
    incidentId: Long,
    body: String
  )

  /**
   * Statistics on each team's quality metrics, number of issues
   */
  case class Statistic(
    team: com.gilt.quality.v0.models.Team,
    totalGrades: Long,
    averageGrade: _root_.scala.Option[Int] = None,
    totalOpenIncidents: Long,
    totalIncidents: Long,
    totalPlans: Long,
    plans: _root_.scala.Option[Seq[com.gilt.quality.v0.models.Plan]] = None
  )

  /**
   * Represents a user that is currently subscribed to a publication
   */
  case class Subscription(
    id: Long,
    organization: com.gilt.quality.v0.models.Organization,
    user: com.gilt.quality.v0.models.User,
    publication: com.gilt.quality.v0.models.Publication
  )

  case class SubscriptionForm(
    organizationKey: String,
    userGuid: _root_.java.util.UUID,
    publication: com.gilt.quality.v0.models.Publication
  )

  /**
   * A team is the main actor in the system. Teams have a unique key and own
   * incidents
   */
  case class Team(
    organization: com.gilt.quality.v0.models.Organization,
    key: String,
    email: _root_.scala.Option[String] = None,
    icons: com.gilt.quality.v0.models.Icons
  )

  case class TeamForm(
    key: String,
    email: _root_.scala.Option[String] = None,
    smileyUrl: _root_.scala.Option[String] = None,
    frownyUrl: _root_.scala.Option[String] = None
  )

  case class TeamMember(
    team: com.gilt.quality.v0.models.Team,
    user: com.gilt.quality.v0.models.User
  )

  /**
   * Statistics on each team's quality metrics, number of issues
   */
  case class TeamMemberSummary(
    team: com.gilt.quality.v0.models.Team,
    numberMembers: Long
  )

  case class UpdateTeamForm(
    email: _root_.scala.Option[String] = None,
    smileyUrl: _root_.scala.Option[String] = None,
    frownyUrl: _root_.scala.Option[String] = None
  )

  /**
   * A user is a top level person.
   */
  case class User(
    guid: _root_.java.util.UUID,
    email: String
  )

  case class UserForm(
    email: String
  )

  /**
   * An external service with which an organization can integrate.
   */
  sealed trait ExternalServiceName

  object ExternalServiceName {

    /**
     * Atlassian JIRA. If integration is enabled, an incident can be created by listing
     * the jira ISSUE number directly.
     */
    case object Jira extends ExternalServiceName { override def toString = "jira" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends ExternalServiceName

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Jira)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): ExternalServiceName = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[ExternalServiceName] = byName.get(value.toLowerCase)

  }

  /**
   * A publication represents something that a user can subscribe to. An example
   * would be subscribing via email to the publication of all new incidents.
   */
  sealed trait Publication

  object Publication {

    /**
     * Email notification whenever an incident is created.
     */
    case object IncidentsCreate extends Publication { override def toString = "incidents.create" }
    /**
     * Email notification whenever an incident is updated.
     */
    case object IncidentsUpdate extends Publication { override def toString = "incidents.update" }
    /**
     * Email notification whenever a plan is created.
     */
    case object PlansCreate extends Publication { override def toString = "plans.create" }
    /**
     * Email notification whenever a plan is updated.
     */
    case object PlansUpdate extends Publication { override def toString = "plans.update" }
    /**
     * Email notification whenever a meeting is adjourned.
     */
    case object MeetingsAdjourned extends Publication { override def toString = "meetings.adjourned" }
    /**
     * Email notification whenever a team that you are on is assigned to an incident.
     */
    case object IncidentsTeamUpdate extends Publication { override def toString = "incidents.team_update" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Publication

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(IncidentsCreate, IncidentsUpdate, PlansCreate, PlansUpdate, MeetingsAdjourned, IncidentsTeamUpdate)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Publication = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Publication] = byName.get(value.toLowerCase)

  }

  sealed trait Response

  object Response {

    case object Complete extends Response { override def toString = "Complete" }
    case object NotYet extends Response { override def toString = "Not Yet" }
    case object Willnotcomplete extends Response { override def toString = "Will not complete" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Response

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Complete, NotYet, Willnotcomplete)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Response = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Response] = byName.get(value.toLowerCase)

  }

  sealed trait Severity

  object Severity {

    case object Low extends Severity { override def toString = "low" }
    case object High extends Severity { override def toString = "high" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Severity

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Low, High)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Severity = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Severity] = byName.get(value.toLowerCase)

  }

  /**
   * Describes what needs to be reviewed about a specific incident
   */
  sealed trait Task

  object Task {

    /**
     * Used in meetings to indicate that a team should be assigned to the incident or
     * that the group should review the team assignment to make sure it is correct.
     */
    case object ReviewTeam extends Task { override def toString = "review_team" }
    /**
     * Indicates that the incident plan should be reviewed and rated
     */
    case object ReviewPlan extends Task { override def toString = "review_plan" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Task

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(ReviewTeam, ReviewPlan)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Task = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Task] = byName.get(value.toLowerCase)

  }

}

package com.gilt.quality.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.quality.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsQualityExternalServiceName = __.read[String].map(ExternalServiceName.apply)
    implicit val jsonWritesQualityExternalServiceName = new Writes[ExternalServiceName] {
      def writes(x: ExternalServiceName) = JsString(x.toString)
    }

    implicit val jsonReadsQualityPublication = __.read[String].map(Publication.apply)
    implicit val jsonWritesQualityPublication = new Writes[Publication] {
      def writes(x: Publication) = JsString(x.toString)
    }

    implicit val jsonReadsQualityResponse = __.read[String].map(Response.apply)
    implicit val jsonWritesQualityResponse = new Writes[Response] {
      def writes(x: Response) = JsString(x.toString)
    }

    implicit val jsonReadsQualitySeverity = __.read[String].map(Severity.apply)
    implicit val jsonWritesQualitySeverity = new Writes[Severity] {
      def writes(x: Severity) = JsString(x.toString)
    }

    implicit val jsonReadsQualityTask = __.read[String].map(Task.apply)
    implicit val jsonWritesQualityTask = new Writes[Task] {
      def writes(x: Task) = JsString(x.toString)
    }

    implicit def jsonReadsQualityAdjournForm: play.api.libs.json.Reads[AdjournForm] = {
      (__ \ "adjourned_at").readNullable[_root_.org.joda.time.DateTime].map { x => new AdjournForm(adjournedAt = x) }
    }

    implicit def jsonWritesQualityAdjournForm: play.api.libs.json.Writes[AdjournForm] = new play.api.libs.json.Writes[AdjournForm] {
      def writes(x: AdjournForm) = play.api.libs.json.Json.obj(
        "adjourned_at" -> play.api.libs.json.Json.toJson(x.adjournedAt)
      )
    }

    implicit def jsonReadsQualityAgendaItem: play.api.libs.json.Reads[AgendaItem] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "meeting").read[com.gilt.quality.v0.models.Meeting] and
        (__ \ "incident").read[com.gilt.quality.v0.models.Incident] and
        (__ \ "task").read[com.gilt.quality.v0.models.Task]
      )(AgendaItem.apply _)
    }

    implicit def jsonWritesQualityAgendaItem: play.api.libs.json.Writes[AgendaItem] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "meeting").write[com.gilt.quality.v0.models.Meeting] and
        (__ \ "incident").write[com.gilt.quality.v0.models.Incident] and
        (__ \ "task").write[com.gilt.quality.v0.models.Task]
      )(unlift(AgendaItem.unapply _))
    }

    implicit def jsonReadsQualityAgendaItemForm: play.api.libs.json.Reads[AgendaItemForm] = {
      (
        (__ \ "meeting_id").read[Long] and
        (__ \ "incident_id").read[Long] and
        (__ \ "task").read[com.gilt.quality.v0.models.Task]
      )(AgendaItemForm.apply _)
    }

    implicit def jsonWritesQualityAgendaItemForm: play.api.libs.json.Writes[AgendaItemForm] = {
      (
        (__ \ "meeting_id").write[Long] and
        (__ \ "incident_id").write[Long] and
        (__ \ "task").write[com.gilt.quality.v0.models.Task]
      )(unlift(AgendaItemForm.unapply _))
    }

    implicit def jsonReadsQualityAuthenticationForm: play.api.libs.json.Reads[AuthenticationForm] = {
      (__ \ "email").read[String].map { x => new AuthenticationForm(email = x) }
    }

    implicit def jsonWritesQualityAuthenticationForm: play.api.libs.json.Writes[AuthenticationForm] = new play.api.libs.json.Writes[AuthenticationForm] {
      def writes(x: AuthenticationForm) = play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.Json.toJson(x.email)
      )
    }

    implicit def jsonReadsQualityEmailMessage: play.api.libs.json.Reads[EmailMessage] = {
      (
        (__ \ "subject").read[String] and
        (__ \ "body").read[String]
      )(EmailMessage.apply _)
    }

    implicit def jsonWritesQualityEmailMessage: play.api.libs.json.Writes[EmailMessage] = {
      (
        (__ \ "subject").write[String] and
        (__ \ "body").write[String]
      )(unlift(EmailMessage.unapply _))
    }

    implicit def jsonReadsQualityError: play.api.libs.json.Reads[Error] = {
      (
        (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
    }

    implicit def jsonWritesQualityError: play.api.libs.json.Writes[Error] = {
      (
        (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
    }

    implicit def jsonReadsQualityExternalService: play.api.libs.json.Reads[ExternalService] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "organization").read[com.gilt.quality.v0.models.Organization] and
        (__ \ "name").read[com.gilt.quality.v0.models.ExternalServiceName] and
        (__ \ "url").read[String] and
        (__ \ "username").read[String]
      )(ExternalService.apply _)
    }

    implicit def jsonWritesQualityExternalService: play.api.libs.json.Writes[ExternalService] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "organization").write[com.gilt.quality.v0.models.Organization] and
        (__ \ "name").write[com.gilt.quality.v0.models.ExternalServiceName] and
        (__ \ "url").write[String] and
        (__ \ "username").write[String]
      )(unlift(ExternalService.unapply _))
    }

    implicit def jsonReadsQualityExternalServiceForm: play.api.libs.json.Reads[ExternalServiceForm] = {
      (
        (__ \ "name").read[com.gilt.quality.v0.models.ExternalServiceName] and
        (__ \ "url").read[String] and
        (__ \ "username").read[String] and
        (__ \ "password").read[String]
      )(ExternalServiceForm.apply _)
    }

    implicit def jsonWritesQualityExternalServiceForm: play.api.libs.json.Writes[ExternalServiceForm] = {
      (
        (__ \ "name").write[com.gilt.quality.v0.models.ExternalServiceName] and
        (__ \ "url").write[String] and
        (__ \ "username").write[String] and
        (__ \ "password").write[String]
      )(unlift(ExternalServiceForm.unapply _))
    }

    implicit def jsonReadsQualityFollowup: play.api.libs.json.Reads[Followup] = {
      (
        (__ \ "key").read[String] and
        (__ \ "plan").read[com.gilt.quality.v0.models.Plan] and
        (__ \ "sent_at").read[_root_.org.joda.time.DateTime]
      )(Followup.apply _)
    }

    implicit def jsonWritesQualityFollowup: play.api.libs.json.Writes[Followup] = {
      (
        (__ \ "key").write[String] and
        (__ \ "plan").write[com.gilt.quality.v0.models.Plan] and
        (__ \ "sent_at").write[_root_.org.joda.time.DateTime]
      )(unlift(Followup.unapply _))
    }

    implicit def jsonReadsQualityFollowupResponse: play.api.libs.json.Reads[FollowupResponse] = {
      (
        (__ \ "followup").read[com.gilt.quality.v0.models.Followup] and
        (__ \ "response").read[com.gilt.quality.v0.models.Response] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "created_by").read[com.gilt.quality.v0.models.User]
      )(FollowupResponse.apply _)
    }

    implicit def jsonWritesQualityFollowupResponse: play.api.libs.json.Writes[FollowupResponse] = {
      (
        (__ \ "followup").write[com.gilt.quality.v0.models.Followup] and
        (__ \ "response").write[com.gilt.quality.v0.models.Response] and
        (__ \ "created_at").write[_root_.org.joda.time.DateTime] and
        (__ \ "created_by").write[com.gilt.quality.v0.models.User]
      )(unlift(FollowupResponse.unapply _))
    }

    implicit def jsonReadsQualityHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    implicit def jsonWritesQualityHealthcheck: play.api.libs.json.Writes[Healthcheck] = new play.api.libs.json.Writes[Healthcheck] {
      def writes(x: Healthcheck) = play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.Json.toJson(x.status)
      )
    }

    implicit def jsonReadsQualityIcons: play.api.libs.json.Reads[Icons] = {
      (
        (__ \ "smiley_url").read[String] and
        (__ \ "frowny_url").read[String]
      )(Icons.apply _)
    }

    implicit def jsonWritesQualityIcons: play.api.libs.json.Writes[Icons] = {
      (
        (__ \ "smiley_url").write[String] and
        (__ \ "frowny_url").write[String]
      )(unlift(Icons.unapply _))
    }

    implicit def jsonReadsQualityIncident: play.api.libs.json.Reads[Incident] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "organization").read[com.gilt.quality.v0.models.Organization] and
        (__ \ "summary").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "team").readNullable[com.gilt.quality.v0.models.Team] and
        (__ \ "severity").read[com.gilt.quality.v0.models.Severity] and
        (__ \ "tags").readNullable[Seq[String]] and
        (__ \ "plan").readNullable[com.gilt.quality.v0.models.Plan] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime]
      )(Incident.apply _)
    }

    implicit def jsonWritesQualityIncident: play.api.libs.json.Writes[Incident] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "organization").write[com.gilt.quality.v0.models.Organization] and
        (__ \ "summary").write[String] and
        (__ \ "description").writeNullable[String] and
        (__ \ "team").writeNullable[com.gilt.quality.v0.models.Team] and
        (__ \ "severity").write[com.gilt.quality.v0.models.Severity] and
        (__ \ "tags").writeNullable[Seq[String]] and
        (__ \ "plan").writeNullable[com.gilt.quality.v0.models.Plan] and
        (__ \ "created_at").write[_root_.org.joda.time.DateTime]
      )(unlift(Incident.unapply _))
    }

    implicit def jsonReadsQualityIncidentForm: play.api.libs.json.Reads[IncidentForm] = {
      (
        (__ \ "team_key").readNullable[String] and
        (__ \ "severity").read[com.gilt.quality.v0.models.Severity] and
        (__ \ "summary").read[String] and
        (__ \ "description").readNullable[String] and
        (__ \ "tags").readNullable[Seq[String]]
      )(IncidentForm.apply _)
    }

    implicit def jsonWritesQualityIncidentForm: play.api.libs.json.Writes[IncidentForm] = {
      (
        (__ \ "team_key").writeNullable[String] and
        (__ \ "severity").write[com.gilt.quality.v0.models.Severity] and
        (__ \ "summary").write[String] and
        (__ \ "description").writeNullable[String] and
        (__ \ "tags").writeNullable[Seq[String]]
      )(unlift(IncidentForm.unapply _))
    }

    implicit def jsonReadsQualityIncidentOrganizationChange: play.api.libs.json.Reads[IncidentOrganizationChange] = {
      (
        (__ \ "incident_id").read[Long] and
        (__ \ "organization_key").read[String]
      )(IncidentOrganizationChange.apply _)
    }

    implicit def jsonWritesQualityIncidentOrganizationChange: play.api.libs.json.Writes[IncidentOrganizationChange] = {
      (
        (__ \ "incident_id").write[Long] and
        (__ \ "organization_key").write[String]
      )(unlift(IncidentOrganizationChange.unapply _))
    }

    implicit def jsonReadsQualityIncidentSummary: play.api.libs.json.Reads[IncidentSummary] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "severity").read[com.gilt.quality.v0.models.Severity] and
        (__ \ "summary").read[String]
      )(IncidentSummary.apply _)
    }

    implicit def jsonWritesQualityIncidentSummary: play.api.libs.json.Writes[IncidentSummary] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "severity").write[com.gilt.quality.v0.models.Severity] and
        (__ \ "summary").write[String]
      )(unlift(IncidentSummary.unapply _))
    }

    implicit def jsonReadsQualityMeeting: play.api.libs.json.Reads[Meeting] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "organization").read[com.gilt.quality.v0.models.Organization] and
        (__ \ "scheduled_at").read[_root_.org.joda.time.DateTime] and
        (__ \ "adjourned_at").readNullable[_root_.org.joda.time.DateTime]
      )(Meeting.apply _)
    }

    implicit def jsonWritesQualityMeeting: play.api.libs.json.Writes[Meeting] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "organization").write[com.gilt.quality.v0.models.Organization] and
        (__ \ "scheduled_at").write[_root_.org.joda.time.DateTime] and
        (__ \ "adjourned_at").writeNullable[_root_.org.joda.time.DateTime]
      )(unlift(Meeting.unapply _))
    }

    implicit def jsonReadsQualityMeetingForm: play.api.libs.json.Reads[MeetingForm] = {
      (__ \ "scheduled_at").read[_root_.org.joda.time.DateTime].map { x => new MeetingForm(scheduledAt = x) }
    }

    implicit def jsonWritesQualityMeetingForm: play.api.libs.json.Writes[MeetingForm] = new play.api.libs.json.Writes[MeetingForm] {
      def writes(x: MeetingForm) = play.api.libs.json.Json.obj(
        "scheduled_at" -> play.api.libs.json.Json.toJson(x.scheduledAt)
      )
    }

    implicit def jsonReadsQualityMeetingPager: play.api.libs.json.Reads[MeetingPager] = {
      (
        (__ \ "meeting").read[com.gilt.quality.v0.models.Meeting] and
        (__ \ "prior_incident").readNullable[com.gilt.quality.v0.models.Incident] and
        (__ \ "next_incident").readNullable[com.gilt.quality.v0.models.Incident]
      )(MeetingPager.apply _)
    }

    implicit def jsonWritesQualityMeetingPager: play.api.libs.json.Writes[MeetingPager] = {
      (
        (__ \ "meeting").write[com.gilt.quality.v0.models.Meeting] and
        (__ \ "prior_incident").writeNullable[com.gilt.quality.v0.models.Incident] and
        (__ \ "next_incident").writeNullable[com.gilt.quality.v0.models.Incident]
      )(unlift(MeetingPager.unapply _))
    }

    implicit def jsonReadsQualityOrganization: play.api.libs.json.Reads[Organization] = {
      (
        (__ \ "key").read[String] and
        (__ \ "name").read[String]
      )(Organization.apply _)
    }

    implicit def jsonWritesQualityOrganization: play.api.libs.json.Writes[Organization] = {
      (
        (__ \ "key").write[String] and
        (__ \ "name").write[String]
      )(unlift(Organization.unapply _))
    }

    implicit def jsonReadsQualityOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "key").readNullable[String]
      )(OrganizationForm.apply _)
    }

    implicit def jsonWritesQualityOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      (
        (__ \ "name").write[String] and
        (__ \ "key").writeNullable[String]
      )(unlift(OrganizationForm.unapply _))
    }

    implicit def jsonReadsQualityPlan: play.api.libs.json.Reads[Plan] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "incident_id").read[Long] and
        (__ \ "body").read[String] and
        (__ \ "grade").readNullable[Int] and
        (__ \ "created_at").read[_root_.org.joda.time.DateTime]
      )(Plan.apply _)
    }

    implicit def jsonWritesQualityPlan: play.api.libs.json.Writes[Plan] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "incident_id").write[Long] and
        (__ \ "body").write[String] and
        (__ \ "grade").writeNullable[Int] and
        (__ \ "created_at").write[_root_.org.joda.time.DateTime]
      )(unlift(Plan.unapply _))
    }

    implicit def jsonReadsQualityPlanForm: play.api.libs.json.Reads[PlanForm] = {
      (
        (__ \ "incident_id").read[Long] and
        (__ \ "body").read[String]
      )(PlanForm.apply _)
    }

    implicit def jsonWritesQualityPlanForm: play.api.libs.json.Writes[PlanForm] = {
      (
        (__ \ "incident_id").write[Long] and
        (__ \ "body").write[String]
      )(unlift(PlanForm.unapply _))
    }

    implicit def jsonReadsQualityStatistic: play.api.libs.json.Reads[Statistic] = {
      (
        (__ \ "team").read[com.gilt.quality.v0.models.Team] and
        (__ \ "total_grades").read[Long] and
        (__ \ "average_grade").readNullable[Int] and
        (__ \ "total_open_incidents").read[Long] and
        (__ \ "total_incidents").read[Long] and
        (__ \ "total_plans").read[Long] and
        (__ \ "plans").readNullable[Seq[com.gilt.quality.v0.models.Plan]]
      )(Statistic.apply _)
    }

    implicit def jsonWritesQualityStatistic: play.api.libs.json.Writes[Statistic] = {
      (
        (__ \ "team").write[com.gilt.quality.v0.models.Team] and
        (__ \ "total_grades").write[Long] and
        (__ \ "average_grade").writeNullable[Int] and
        (__ \ "total_open_incidents").write[Long] and
        (__ \ "total_incidents").write[Long] and
        (__ \ "total_plans").write[Long] and
        (__ \ "plans").writeNullable[Seq[com.gilt.quality.v0.models.Plan]]
      )(unlift(Statistic.unapply _))
    }

    implicit def jsonReadsQualitySubscription: play.api.libs.json.Reads[Subscription] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "organization").read[com.gilt.quality.v0.models.Organization] and
        (__ \ "user").read[com.gilt.quality.v0.models.User] and
        (__ \ "publication").read[com.gilt.quality.v0.models.Publication]
      )(Subscription.apply _)
    }

    implicit def jsonWritesQualitySubscription: play.api.libs.json.Writes[Subscription] = {
      (
        (__ \ "id").write[Long] and
        (__ \ "organization").write[com.gilt.quality.v0.models.Organization] and
        (__ \ "user").write[com.gilt.quality.v0.models.User] and
        (__ \ "publication").write[com.gilt.quality.v0.models.Publication]
      )(unlift(Subscription.unapply _))
    }

    implicit def jsonReadsQualitySubscriptionForm: play.api.libs.json.Reads[SubscriptionForm] = {
      (
        (__ \ "organization_key").read[String] and
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "publication").read[com.gilt.quality.v0.models.Publication]
      )(SubscriptionForm.apply _)
    }

    implicit def jsonWritesQualitySubscriptionForm: play.api.libs.json.Writes[SubscriptionForm] = {
      (
        (__ \ "organization_key").write[String] and
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "publication").write[com.gilt.quality.v0.models.Publication]
      )(unlift(SubscriptionForm.unapply _))
    }

    implicit def jsonReadsQualityTeam: play.api.libs.json.Reads[Team] = {
      (
        (__ \ "organization").read[com.gilt.quality.v0.models.Organization] and
        (__ \ "key").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "icons").read[com.gilt.quality.v0.models.Icons]
      )(Team.apply _)
    }

    implicit def jsonWritesQualityTeam: play.api.libs.json.Writes[Team] = {
      (
        (__ \ "organization").write[com.gilt.quality.v0.models.Organization] and
        (__ \ "key").write[String] and
        (__ \ "email").writeNullable[String] and
        (__ \ "icons").write[com.gilt.quality.v0.models.Icons]
      )(unlift(Team.unapply _))
    }

    implicit def jsonReadsQualityTeamForm: play.api.libs.json.Reads[TeamForm] = {
      (
        (__ \ "key").read[String] and
        (__ \ "email").readNullable[String] and
        (__ \ "smiley_url").readNullable[String] and
        (__ \ "frowny_url").readNullable[String]
      )(TeamForm.apply _)
    }

    implicit def jsonWritesQualityTeamForm: play.api.libs.json.Writes[TeamForm] = {
      (
        (__ \ "key").write[String] and
        (__ \ "email").writeNullable[String] and
        (__ \ "smiley_url").writeNullable[String] and
        (__ \ "frowny_url").writeNullable[String]
      )(unlift(TeamForm.unapply _))
    }

    implicit def jsonReadsQualityTeamMember: play.api.libs.json.Reads[TeamMember] = {
      (
        (__ \ "team").read[com.gilt.quality.v0.models.Team] and
        (__ \ "user").read[com.gilt.quality.v0.models.User]
      )(TeamMember.apply _)
    }

    implicit def jsonWritesQualityTeamMember: play.api.libs.json.Writes[TeamMember] = {
      (
        (__ \ "team").write[com.gilt.quality.v0.models.Team] and
        (__ \ "user").write[com.gilt.quality.v0.models.User]
      )(unlift(TeamMember.unapply _))
    }

    implicit def jsonReadsQualityTeamMemberSummary: play.api.libs.json.Reads[TeamMemberSummary] = {
      (
        (__ \ "team").read[com.gilt.quality.v0.models.Team] and
        (__ \ "number_members").read[Long]
      )(TeamMemberSummary.apply _)
    }

    implicit def jsonWritesQualityTeamMemberSummary: play.api.libs.json.Writes[TeamMemberSummary] = {
      (
        (__ \ "team").write[com.gilt.quality.v0.models.Team] and
        (__ \ "number_members").write[Long]
      )(unlift(TeamMemberSummary.unapply _))
    }

    implicit def jsonReadsQualityUpdateTeamForm: play.api.libs.json.Reads[UpdateTeamForm] = {
      (
        (__ \ "email").readNullable[String] and
        (__ \ "smiley_url").readNullable[String] and
        (__ \ "frowny_url").readNullable[String]
      )(UpdateTeamForm.apply _)
    }

    implicit def jsonWritesQualityUpdateTeamForm: play.api.libs.json.Writes[UpdateTeamForm] = {
      (
        (__ \ "email").writeNullable[String] and
        (__ \ "smiley_url").writeNullable[String] and
        (__ \ "frowny_url").writeNullable[String]
      )(unlift(UpdateTeamForm.unapply _))
    }

    implicit def jsonReadsQualityUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "email").read[String]
      )(User.apply _)
    }

    implicit def jsonWritesQualityUser: play.api.libs.json.Writes[User] = {
      (
        (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "email").write[String]
      )(unlift(User.unapply _))
    }

    implicit def jsonReadsQualityUserForm: play.api.libs.json.Reads[UserForm] = {
      (__ \ "email").read[String].map { x => new UserForm(email = x) }
    }

    implicit def jsonWritesQualityUserForm: play.api.libs.json.Writes[UserForm] = new play.api.libs.json.Writes[UserForm] {
      def writes(x: UserForm) = play.api.libs.json.Json.obj(
        "email" -> play.api.libs.json.Json.toJson(x.email)
      )
    }
  }
}