object GuestUserFields {
  val id = "id"
  val email = "email"
  val name = "name"
  val bar = "bar"
}

implicit def jsonReadsApiDocTestGuestUser: play.api.libs.json.Reads[GuestUser] = new play.api.libs.json.Reads[GuestUser] {
  def reads(json: play.api.libs.json.JsValue) = {
    try {
      (
        (__ \ GuestUserFields.id).read[Long] and
        (__ \ GuestUserFields.email).read[String] and
        (__ \ GuestUserFields.name).readNullable[String] and
        (__ \ GuestUserFields.bar).read[String]
      )(GuestUser.apply _).reads(json)
    } catch {
      // Catch Validation Errors
      case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
    }
  }
}

implicit def jsonWritesApiDocTestGuestUser: play.api.libs.json.Writes[GuestUser] = {
  (
    (__ \ GuestUserFields.id).write[Long] and
    (__ \ GuestUserFields.email).write[String] and
    (__ \ GuestUserFields.name).writeNullable[String] and
    (__ \ GuestUserFields.bar).write[String]
  )(unlift(GuestUser.unapply _))
}

object RegisteredUserFields {
  val id = "id"
  val email = "email"
  val name = "name"
  val foo = "foo"
}

implicit def jsonReadsApiDocTestRegisteredUser: play.api.libs.json.Reads[RegisteredUser] = new play.api.libs.json.Reads[RegisteredUser] {
  def reads(json: play.api.libs.json.JsValue) = {
    try {
      (
        (__ \ RegisteredUserFields.id).read[Long] and
        (__ \ RegisteredUserFields.email).read[String] and
        (__ \ RegisteredUserFields.name).readNullable[String] and
        (__ \ RegisteredUserFields.foo).read[String]
      )(RegisteredUser.apply _).reads(json)
    } catch {
      // Catch Validation Errors
      case ex: IllegalArgumentException => play.api.libs.json.JsError(s"${ex.getMessage}")
    }
  }
}

implicit def jsonWritesApiDocTestRegisteredUser: play.api.libs.json.Writes[RegisteredUser] = {
  (
    (__ \ RegisteredUserFields.id).write[Long] and
    (__ \ RegisteredUserFields.email).write[String] and
    (__ \ RegisteredUserFields.name).writeNullable[String] and
    (__ \ RegisteredUserFields.foo).write[String]
  )(unlift(RegisteredUser.unapply _))
}

implicit def jsonReadsApiDocTestUser: play.api.libs.json.Reads[User] = {
  (
    (__ \ "registered_user").read(jsonReadsApiDocTestRegisteredUser).asInstanceOf[play.api.libs.json.Reads[User]]
    orElse
    (__ \ "guest_user").read(jsonReadsApiDocTestGuestUser).asInstanceOf[play.api.libs.json.Reads[User]]
    orElse
    play.api.libs.json.Reads(jsValue => play.api.libs.json.JsSuccess(test.apidoc.apidoctest.v0.models.UserUndefinedType(jsValue.toString))).asInstanceOf[play.api.libs.json.Reads[User]]
  )
}

implicit def jsonWritesApiDocTestUser: play.api.libs.json.Writes[User] = new play.api.libs.json.Writes[User] {
  def writes(obj: test.apidoc.apidoctest.v0.models.User) = obj match {
    case x: test.apidoc.apidoctest.v0.models.RegisteredUser => play.api.libs.json.Json.obj("registered_user" -> jsonWritesApiDocTestRegisteredUser.writes(x))
    case x: test.apidoc.apidoctest.v0.models.GuestUser => play.api.libs.json.Json.obj("guest_user" -> jsonWritesApiDocTestGuestUser.writes(x))
    case x: test.apidoc.apidoctest.v0.models.UserUndefinedType => sys.error(s"The type[test.apidoc.apidoctest.v0.models.UserUndefinedType] should never be serialized")
  }
}